I will give your Spring Boot Code below and remember this then I will give you what to do.

Bill entity:
package com.hms.projectSpringBoot.hospital.entity;

import com.hms.projectSpringBoot.security.entity.User;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "bills")
public class Bill {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private String name;
    private int phone;
    private String email;
    private String address;
    private LocalDateTime invoiceDate;
    private int totalAmount;
    private int amountPaid;
    private int balance;
    private String status;
    private String description;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "patient_id", nullable = false)
    private User patient;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "doctor_id")
    private User doctor;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "pharmacist_id")
    private User pharmacist;

    @ManyToMany
    private List<Medicine> medicineList;

}

Bill Repository:
package com.hms.projectSpringBoot.hospital.repository;

import com.hms.projectSpringBoot.hospital.entity.Bill;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface BillRepository extends JpaRepository<Bill, Long> {
    List<Bill> findByPatientId(Long patientId);
    List<Bill> findByDoctorId(Long doctorId);
    List<Bill> findByPharmacistId(Long pharmacistId);
}

Bill Service:
package com.hms.projectSpringBoot.hospital.service;

import com.hms.projectSpringBoot.hospital.entity.Appointment;
import com.hms.projectSpringBoot.hospital.entity.Bill;
import com.hms.projectSpringBoot.hospital.repository.BillRepository;
import com.hms.projectSpringBoot.security.entity.User;
import com.hms.projectSpringBoot.security.repository.UserRepository;
import com.hms.projectSpringBoot.util.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class BillService {

    @Autowired
    private BillRepository billRepository;

    @Autowired
    private UserRepository userRepository;

    public ApiResponse getAllBills() {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            List<Bill> bills = billRepository.findAll();
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bills fetched successfully.");
            apiResponse.setData("bills", bills);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }

    public ApiResponse getBillById(Long id) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            Bill bill = billRepository.findById(id).orElse(null);
            if (bill == null) {
                apiResponse.setMessage("Bill not found.");
                return apiResponse;
            }
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bill fetched successfully.");
            apiResponse.setData("bill", bill);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }

    public ApiResponse createBill(Bill bill) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            if (bill.getPatient() != null && bill.getPatient().getId() != null) {
                User user = userRepository.findById(bill.getDoctor().getId()).orElse(null);

                if (user == null || user.getRole() == null) {
                    apiResponse.setMessage("User must have a valid role and must exist.");
                    return apiResponse;
                }
            }
            billRepository.save(bill);
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bill created successfully.");
            apiResponse.setData("bill", bill);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }

    public ApiResponse updateBill(Bill updatedBill) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            User user = userRepository.findById(updatedBill.getDoctor().getId()).orElse(null);

            if (user == null || user.getRole() == null) {
                apiResponse.setMessage("User must have a valid role and must exist.");
                return apiResponse;
            }
            billRepository.save(updatedBill);
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bill updated successfully.");
            apiResponse.setData("updateBill", updatedBill);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }

    public ApiResponse deleteBill(Long id) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            Bill bill = billRepository.findById(id).orElse(null);
            if (bill == null) {
                apiResponse.setMessage("Bill not found.");
                return apiResponse;
            }
            billRepository.deleteById(id);
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bill deleted successfully.");
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
        }
        return apiResponse;
    }

    public ApiResponse getBillsByPatientId(Long patientId) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            List<Bill> bills = billRepository.findByPatientId(patientId);
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bills fetched successfully.");
            apiResponse.setData("bills", bills);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }

    public ApiResponse getBillsByDoctorId(Long doctorId) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            List<Bill> bills = billRepository.findByDoctorId(doctorId);
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bills fetched successfully.");
            apiResponse.setData("bills", bills);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }

    public ApiResponse getBillsByPharmacistId(Long pharmacistId) {
        ApiResponse apiResponse = new ApiResponse(false);
        try {
            List<Bill> bills = billRepository.findByPharmacistId(pharmacistId);
            apiResponse.setSuccessful(true);
            apiResponse.setMessage("Bills fetched successfully.");
            apiResponse.setData("bill", bills);
            return apiResponse;
        } catch (Exception e) {
            apiResponse.setMessage(e.getMessage());
            return apiResponse;
        }
    }
}

Bill Controller:
package com.hms.projectSpringBoot.hospital.controller;

import com.hms.projectSpringBoot.hospital.entity.Bill;
import com.hms.projectSpringBoot.hospital.service.BillService;
import com.hms.projectSpringBoot.util.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/bills")
@CrossOrigin
public class BillController {

    @Autowired
    private BillService billService;

    @GetMapping
    public ApiResponse getAllBills() {
        return billService.getAllBills();
    }

    @GetMapping("/{id}")
    public ApiResponse getBillById(@PathVariable Long id) {
        return billService.getBillById(id);
    }

    @PostMapping
    public ApiResponse createBill(@RequestBody Bill bill) {
        return billService.createBill(bill);
    }

    @PutMapping("/{id}")
    public ApiResponse updateBill(@RequestBody Bill bill) {
        return billService.updateBill(bill);
    }

    @DeleteMapping("/{id}")
    public ApiResponse deleteBill(@PathVariable Long id) {
        return billService.deleteBill(id);
    }

    @GetMapping("/getBillsByPatientId")
    public ApiResponse getBillsByPatientId(@RequestParam Long patientId) {
        return billService.getBillsByPatientId(patientId);
    }

    @GetMapping("/getBillsByDoctorId")
    public ApiResponse getBillsByDoctorId(@PathVariable Long doctorId) {
        return billService.getBillsByDoctorId(doctorId);
    }

    @GetMapping("/getBillsByPharmacistId")
    public ApiResponse getBillsByPharmacistId(@PathVariable Long pharmacistId) {
        return billService.getBillsByPharmacistId(pharmacistId);
    }
}

Now do according to this code build angular code, in angular i named Medicine-Bill.
So do medicine-bill service, medicine-bill model and medicine-bill-create.